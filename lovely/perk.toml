[manifest]
version = '1.0.0'
dump_lua = true
priority = 0

# temp changes to run
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = 'if (not G.hand.cards[1]) and G.deck.cards[1] then'
position = 'at'
payload = '''if (not G.hand.cards[1]) and G.deck.cards[1] and not G.GAME.loyalty_card then'''
match_indent = true


# general perk functionality

# temp changes to run
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = 'self.GAME = saveTable and saveTable.GAME or self:init_game_object()'
position = 'after'
payload = '''self.GAME.loyalty_card = self.GAME.loyalty_card or {cards = {}, hand_size = 0, shredded ={}}'''
match_indent = true

# TODO seperate hand for perk cards
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.deck = CardArea('''
position = "before"
payload = '''self.perks = CardArea(
        0, 0,
        CAI.hand_W,CAI.hand_H, 
        {card_limit = self.GAME.starting_params.hand_size, type = 'hand'})'''
match_indent = true
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.discard.T.x = G.jokers.T.x + G.jokers.T.w/2 + 0.3 + 15'''
position = "before"
payload = '''G.perks.T.x = G.TILE_W - G.perks.T.w - 2.85
G.perks.T.y = G.TILE_H - (0.5 * G.perks.T.h)
G.perks:hard_set_VT()'''
match_indent = true

# exploit area?
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.deck = CardArea('''
position = "before"
payload = '''self.exploit = CardArea(
        0, 0,
        CAI.play_W,CAI.play_H, 
        {card_limit = 1, type = 'play'})'''
match_indent = true
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.discard.T.x = G.jokers.T.x + G.jokers.T.w/2 + 0.3 + 15'''
position = "before"
payload = '''G.exploit.T.x = G.play.T.x
G.exploit.T.y = G.play.T.y
G.exploit:hard_set_VT()'''
match_indent = true

# card burning functionality
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if (not v.shattered) and (not v.destroyed) then'''
position = "at"
payload = '''if (not v.shattered) and (not v.destroyed) and (not v.burnt) and (not v.shredded) then'''
match_indent = true
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.deck = CardArea('''
position = "before"
payload = '''self.burnt = CardArea(
        0, 0,
        CAI.discard_W,CAI.discard_H,
        {card_limit = 500, type = 'discard'})'''
match_indent = true
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.discard.T.x = G.jokers.T.x + G.jokers.T.w/2 + 0.3 + 15'''
position = "before"
payload = '''G.burnt.T.x = G.jokers.T.x + G.jokers.T.w/2 + 0.3 + 15
G.burnt.T.y = 4.2
G.burnt:hard_set_VT()'''
match_indent = true
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.voucher_restock = nil'''
position = "before"
payload = '''G.FUNCS.draw_from_burnt_to_discard()'''
match_indent = true

# TODO card shredding

# fixes bug that disallowed selecting perk cards from booster packs
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''elseif card.ability.set == 'Enhanced' or card.ability.set == 'Default' then'''
position = "at"
payload = '''elseif card.ability.set == 'Enhanced' or card.ability.set == 'Default' or card.ability.set == 'Perk' then'''
match_indent = true

# disallow changing edition/enhancement/seal on perk cards
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:set_ability(center, initial, delay_sprites)'''
position = "after"
payload = '''   if self.ability and self.ability.set == 'Perk' then return end'''
match_indent = true
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:set_edition(edition, immediate, silent)'''
position = "after"
payload = '''   if self.ability and self.ability.set == 'Perk' then return end'''
match_indent = true
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:set_seal(_seal, silent, immediate)'''
position = "after"
payload = '''   if self.ability and self.ability.set == 'Perk' then return end'''
match_indent = true

# starting with 0 advantage
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.GAME.round_resets.hands = self.GAME.starting_params.hands'''
position = "after"
payload = '''self.GAME.round_resets.advantage = self.GAME.starting_params.advantage
self.GAME.round_resets.health = self.GAME.starting_params.health'''
match_indent = true
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''G.GAME.current_round.hands_left = G.GAME.round_resets.hands'''
position = "after"
payload = '''G.GAME.current_round.advantage_left = G.GAME.round_resets.advantage
G.GAME.current_round.health_left = G.GAME.round_resets.health'''
match_indent = true

# card popup

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''name_from_rows(AUT.name, is_playing_card and G.C.WHITE or nil),'''
position = "after"
payload = '''card.ability and card.ability.set == 'Perk' and loyalty_rank_from_rows(card) or nil,'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''desc_from_rows(AUT.main),'''
position = "after"
payload = '''card.ability and card.ability.set == 'Perk' and loyalty_on_discard_from_rows(card) or nil,'''
match_indent = true



